[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]] # color scheme
repo = 'w0ng/vim-hybrid'
hook_add = '''
set background=dark
colorscheme hybrid
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
let NERDTreeShowHidden = 1
nnoremap <silent><C-e> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'readonly', 'absolutepath', 'modified' ] ],
      \ }
      \ }
'''

# Indent
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_source = '''
    let g:indent_guides_guide_size = 1
    let g:indent_guides_enable_on_vim_startup = 1
    let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']
'''

## Git gutter
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_source = '''
    nmap <Leader>h] <Plug>GitGutterNextHunk
    nmap <Leader>h[ <Plug>GitGutterPrevHunk
    set updatetime=250
'''

## Git fugitive
[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo='jalvesaq/Nvim-R'

[[plugins]]
repo='easymotion/vim-easymotion'
hook_add='''
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_smartcase = 1
map s <Plug>(easymotion-overwin-f)
map s <Plug>(easymotion-overwin-f2)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
'''

[[plugins]]
repo='prabirshrestha/asyncomplete.vim'

[[plugins]]
repo='mattn/vim-goimports'
hook_add='''
let g:goimports = 1
let g:goimports_simplify = 1
'''
merged='0'

[[plugins]]
repo='leafgarland/typescript-vim'

[[plugins]]
repo='peitalin/vim-jsx-typescript'

[[plugins]]
repo='prabirshrestha/vim-lsp'
merged='0'
hook_add='''
" for log
let g:lsp_log_verbose = 1
let g:lsp_log_file = expand('~/.log/vim-lsp.log')
let g:asyncomplete_log_file = expand('~/.log/asyncomplete.log')

let g:lsp_diagnostics_enabled = 1
let g:lsp_signs_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_highlights_enabled = 0
let g:lsp_preview_float = 1
let g:lsp_text_edit_enabled = 0
let g:lsp_async_completion = 1
let g:lsp_diagnostics_float_cursor = 1

nnoremap gd :<C-u>LspDefinition<CR>
nnoremap gr :<C-u>LspReferences<CR>
nnoremap gi :<C-u>LspImplementation<CR>
nnoremap gt :<C-u>LspTypeDefinition<CR>
nnoremap <leader>rn :<C-u>LspRename<CR>
nnoremap [g :<C-u>LspPreviousDiagnostic<CR>
nnoremap ]g :<C-u>LspNextDiagnostic<CR>
nnoremap K :<C-u>LspHover<CR>

let s:lombok_path = $HOME . '/.lsp/lombok.jar'
let s:eclipse_jdt_ls_jar_path = $HOME . '/.lsp/eclipse.jdt.ls/plugins/org.eclipse.equinox.launcher_1.4.0.v20161219-1356.jar'
let s:eclipse_jdt_ls_config_path = $HOME . '/.lsp/eclipse.jdt.ls/config_mac'

au User lsp_setup call lsp#register_server({
    \   'name': 'eclipse.jdt.ls',
    \   'cmd': {server_info->[
    \       'java',
    \       '-javaagent:' . expand(s:lombok_path),
    \       '-Xbootclasspath/a:' . expand(s:lombok_path),
    \       '-Declipse.application=org.eclipse.jdt.ls.core.id1',
    \       '-Dosgi.bundles.defaultStartLevel=4',
    \       '-Declipse.product=org.eclipse.jdt.ls.core.product',
    \       '-Dlog.protocol=true',
    \       '-Dlog.level=ALL',
    \       '-noverify',
    \       '-Dfile.encoding=UTF-8',
    \       '-Xms1g',
    \       '-Xmx2G',
    \       '-jar',
    \       expand(s:eclipse_jdt_ls_jar_path),
    \       '-configuration',
    \       expand(s:eclipse_jdt_ls_config_path),
    \       '-data',
    \       expand('~/.lsp/eclipse.jdt.ls/workspace'),
    \       '--add-modules=ALL-SYSTEM',
    \       '--add-opens',
    \       'java.base/java.util=ALL-UNNAMED',
    \       '--add-opens',
    \       'java.base/java.lang=ALL-UNNAMED'
    \   ]},
    \   'whitelist': ['java'],
    \   'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'build.gradle'))},
    \ })

if executable('typescript-language-server')
  au User lsp_setup call lsp#register_server({
    \   'name': 'typescript-language-server',
    \   'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
    \   'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
    \   'whitelist': ['typescript', 'typescriptreact'],
    \ })
endif

if executable('efm-langserver')
  au User lsp_setup call lsp#register_server({
    \   'name': 'efm-langserver',
    \   'cmd': {server_info->['efm-langserver', '-c=/Users/oky123/.config/efm-langserver/config.yaml']},
    \   'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
    \   'whitelist': ['typescript', 'typescriptreact'],
    \ })

  autocmd BufWritePre *.ts,*.tsx call execute('LspDocumentFormatSync --server=efm-langserver')
endif
'''

[[plugins]]
repo='mattn/vim-lsp-settings'
merged='0'

[[plugins]]
repo='prabirshrestha/asyncomplete-lsp.vim'
